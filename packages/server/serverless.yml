service: dba-server

frameworkVersion: "^3.39.0"

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  region: sa-east-1
  stage: ${opt:stage, 'dev'}        # por defecto 'dev'
  memorySize: 256
  timeout: 10
  environment:
    NODE_OPTIONS: "--enable-source-maps"
    NODE_ENV: ${sls:stage}          # 'dev' por defecto
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}   # <-- se inyecta desde el workflow/entorno
  httpApi:
    cors:
      # En dev abierto; en prod restringe a tu dominio de GitHub Pages (p.ej. https://kailucho.github.io)
      allowedOrigins:
        - "*"
      allowedHeaders:
        - "*"
      allowedMethods:
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
        - OPTIONS
      allowCredentials: false

package:
  individually: false
  patterns:
    - "!**/*"
    - dist/lambda.mjs               # bundle generado por esbuild (build:lambda)

functions:
  api:
    name: dba-api-${sls:stage}
    description: "@dba/server Express on Lambda via serverless-http"
    handler: dist/lambda.handler
    runtime: nodejs20.x
    architecture: arm64
    memorySize: 256
    timeout: 10
    events:
      - httpApi:
          method: ANY
          path: /{proxy+}
      - httpApi:
          method: GET
          path: /health

plugins: []

custom:
  # El build se hace fuera con esbuild (npm run build:lambda).
  # En prod, cambia CORS para permitir solo tu dominio de Pages.
